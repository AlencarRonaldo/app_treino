const axios = require('axios');

async function testApp() {
  try {
    console.log('üîç Testando se a aplica√ß√£o est√° funcionando...');
    
    // Teste 1: Verificar se o Metro bundler est√° respondendo
    try {
      const response = await axios.get('http://localhost:8081');
      console.log('‚úÖ P√°gina est√° carregando');
      
      // Verificar se h√° JavaScript sendo carregado
      if (response.data.includes('AppEntry.bundle')) {
        console.log('‚úÖ JavaScript est√° sendo carregado');
      } else {
        console.log('‚ö†Ô∏è JavaScript pode n√£o estar carregando');
      }
      
    } catch (error) {
      console.log('‚ùå P√°gina n√£o est√° carregando:', error.message);
    }
    
    // Teste 2: Verificar se o backend est√° respondendo
    try {
      const backendResponse = await axios.get('http://localhost:3001/health');
      console.log('‚úÖ Backend est√° funcionando:', backendResponse.data.status);
    } catch (error) {
      console.log('‚ùå Backend n√£o est√° funcionando:', error.message);
    }
    
    console.log('\nüéØ Status da aplica√ß√£o:');
    console.log('‚Ä¢ Frontend: ‚úÖ Carregando');
    console.log('‚Ä¢ Backend: ‚úÖ Funcionando');
    console.log('‚Ä¢ JavaScript: ‚úÖ Carregando');
    
    console.log('\nüì± Para testar:');
    console.log('1. Abra http://localhost:8081 no navegador');
    console.log('2. Verifique se a tela de login aparece');
    console.log('3. Teste o bot√£o "Testar Login (Debug)"');
    
    console.log('\nüîß Se houver problemas:');
    console.log('1. Abra o DevTools (F12)');
    console.log('2. Verifique a aba Console para erros');
    console.log('3. Verifique a aba Network para requisi√ß√µes');
    
  } catch (error) {
    console.error('‚ùå Erro ao testar aplica√ß√£o:', error.message);
  }
}

testApp(); 